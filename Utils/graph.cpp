#include <bits/stdc++.h>
using namespace std;

// [row][col]
int dist[10][10];

// 入力
// 0 9 9 9 9 9 9 9 9 9
// 9 0 9 9 9 9 9 9 9 9
// 9 9 0 9 9 9 9 9 9 9
// 9 9 9 0 9 9 9 9 9 9
// 9 9 9 9 0 9 9 9 9 2
// 9 9 9 9 9 0 9 9 9 9
// 9 9 9 9 9 9 0 9 9 9
// 9 9 9 9 9 9 9 0 9 9
// 9 9 9 9 2 9 9 9 0 9
// 9 2 9 9 9 9 9 9 9 0
// 出力

int main()
{
	// [row][col]
	int dist[10][10] = {
	    {0, 9, 9, 9, 9, 9, 9, 9, 9, 9}, // 0
	    {9, 0, 9, 9, 9, 9, 9, 9, 9, 9}, // 1
		{9, 9, 0, 9, 9, 9, 9, 9, 9, 9}, // 2
	    {9, 9, 9, 0, 9, 9, 9, 9, 9, 9}, // 3
		{9, 9, 9, 9, 0, 9, 9, 9, 9, 2}, // 4
	    {9, 9, 9, 9, 9, 0, 9, 9, 9, 9}, // 5
		{9, 9, 9, 9, 9, 9, 0, 9, 9, 9}, // 6
	    {9, 9, 9, 9, 9, 9, 9, 0, 9, 9}, // 7
		{9, 9, 9, 9, 2, 9, 9, 9, 0, 9}, // 8
	    {9, 2, 9, 9, 9, 9, 9, 9, 9, 0}, // 9
	//   0  1  2  3  4  5  6  7  8  9
	};

	// 最短経路問題
	// ■■■■■■ワーシャル・フロイド■■■■■
	// distには各辺のコストをセットしておく。
	// 以下の3重ループで最短コストが求まる。
	for (int k = 0; k < 10; k++) {
		for (int i = 0; i < 10; i++) {
			for (int j = 0; j < 10; j++) {
				dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j]);
			}
		}
	}

	// 結果出力
	for (int i = 0; i < 10; i++) {
		for (int j = 0; j < 10; j++) {
			cout << dist[i][j] << " ";
		}
		cout << endl;
	}
	// 0 9 9 9 9 9 9 9 9 9 
	// 9 0 9 9 9 9 9 9 9 9 
	// 9 9 0 9 9 9 9 9 9 9 
	// 9 9 9 0 9 9 9 9 9 9 
	// 9 4 9 9 0 9 9 9 9 2 
	// 9 9 9 9 9 0 9 9 9 9 
	// 9 9 9 9 9 9 0 9 9 9 
	// 9 9 9 9 9 9 9 0 9 9 
	// 9 6 9 9 2 9 9 9 0 4 ←
	// 9 2 9 9 9 9 9 9 9 0 
	//   ↑
	
	// dist[8][1] が 9 から 6 に変わっている点に着目
	// 8->1 だとコスト9だが、8->4->9->1 だとコスト6で行ける。
}
